// static/js/admin/custom-tabs.js

// –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫ –±–µ–∑ jQuery UI
document.addEventListener('DOMContentLoaded', function() {
    console.log('Custom tabs script loaded!');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤–∫–ª–∞–¥–æ–∫ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(initCustomTabs, 500);

    function initCustomTabs() {
        console.log('Initializing custom tabs...');

        // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
        detectAndInitializeTabs();

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö –≤ –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å —Ñ–æ—Ä–º—ã
        addTranslationGuidance();
    }

    function addTranslationGuidance() {
        const form = document.querySelector('form');
        if (!form) return;

        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–Ω–æ–≤–∞
        if (document.querySelector('.translation-info-panel')) return;

        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
        const infoPanel = document.createElement('div');
        infoPanel.className = 'translation-info-panel';
        infoPanel.innerHTML = `
            <h3 style="margin-top:0;">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏</h3>
            <p>üá∑üá∫ <strong>–†—É—Å—Å–∫–∏–π</strong> - –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å)</p>
            <p>üá¨üáß <strong>English</strong> - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫</p>
            <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏.</p>
        `;

        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤
        const tabNav = document.createElement('div');
        tabNav.className = 'global-language-tabs';

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        ['ru', 'en'].forEach((lang, index) => {
            const button = document.createElement('button');
            button.setAttribute('data-lang', lang);
            button.setAttribute('type', 'button');
            button.className = 'global-tab-button';
            button.textContent = lang === 'ru' ? '–†—É—Å—Å–∫–∏–π' : 'English';

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –∫ –∫–Ω–æ–ø–∫–∞–º
            const flag = document.createElement('span');
            flag.textContent = lang === 'ru' ? ' üá∑üá∫' : ' üá¨üáß';
            button.appendChild(flag);

            // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É –∞–∫—Ç–∏–≤–Ω–æ–π
            if (index === 0) {
                button.classList.add('active');
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
            button.addEventListener('click', function() {
                // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
                tabNav.querySelectorAll('.global-tab-button').forEach(btn => {
                    btn.classList.remove('active');
                });

                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∫–Ω–æ–ø–∫—É
                this.classList.add('active');

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
                switchLanguageFields(this.getAttribute('data-lang'));
            });

            tabNav.appendChild(button);
        });

        // –í—Å—Ç–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º—É
        form.insertBefore(infoPanel, form.firstChild);
        form.insertBefore(tabNav, form.firstChild);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        switchLanguageFields('ru');
    }

    function detectAndInitializeTabs() {
        // –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è —Å _ru –∏ _en —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
        const ruFields = document.querySelectorAll('[id$="_ru"], [name$="_ru"]');
        const enFields = document.querySelectorAll('[id$="_en"], [name$="_en"]');

        if (ruFields.length === 0 && enFields.length === 0) {
            console.log('No translation fields found');
            return;
        }

        console.log(`Found ${ruFields.length} Russian fields and ${enFields.length} English fields`);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —è–∑—ã–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        addLanguageIndicators();
    }

    function addLanguageIndicators() {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –º–µ—Ç–∫–∏ –ø–æ–ª–µ–π
        const labels = document.querySelectorAll('label');

        labels.forEach(label => {
            const forAttr = label.getAttribute('for');
            if (!forAttr) return;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –º–µ—Ç–∫–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ–º—É –ø–æ–ª—é
            if (forAttr.endsWith('_ru')) {
                if (!label.querySelector('.lang-indicator')) {
                    const indicator = document.createElement('span');
                    indicator.className = 'lang-indicator';
                    indicator.textContent = ' üá∑üá∫';
                    indicator.title = '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫';
                    label.appendChild(indicator);
                }
            } else if (forAttr.endsWith('_en')) {
                if (!label.querySelector('.lang-indicator')) {
                    const indicator = document.createElement('span');
                    indicator.className = 'lang-indicator';
                    indicator.textContent = ' üá¨üáß';
                    indicator.title = 'English';
                    label.appendChild(indicator);
                }
            }
        });
    }

    function switchLanguageFields(lang) {
        console.log(`Switching to language: ${lang}`);

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º —Ñ–æ—Ä–º—ã
        const formRows = document.querySelectorAll('.form-row, .field-box, .tabular fieldset');

        formRows.forEach(row => {
            // –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å —è–∑—ã–∫–æ–≤—ã–º–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
            const ruElements = row.querySelectorAll('[id$="_ru"], [name$="_ru"]');
            const enElements = row.querySelectorAll('[id$="_en"], [name$="_en"]');

            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–µ –ø–æ–ª—è
            if (ruElements.length > 0 || enElements.length > 0) {
                // –£–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ø–æ–ª–µ–π
                ruElements.forEach(elem => {
                    const container = getFieldContainer(elem);
                    if (container) {
                        container.style.display = lang === 'ru' ? '' : 'none';
                    }
                });

                enElements.forEach(elem => {
                    const container = getFieldContainer(elem);
                    if (container) {
                        container.style.display = lang === 'en' ? '' : 'none';
                    }
                });

                // –ï—Å–ª–∏ –ø–æ–ª–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TinyMCE
                updateTinyMCEVisibility(ruElements, enElements, lang);
            }
        });
    }

    function getFieldContainer(element) {
        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ–ª—è
        let container = element.closest('.form-row') ||
                        element.closest('.field-box') ||
                        element.closest('.form-group');

        if (!container) {
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç
            container = element.parentElement;
            // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            while (container && container.tagName !== 'BODY' &&
                   !container.classList.contains('field-box') &&
                   !container.classList.contains('form-row')) {
                container = container.parentElement;
            }
        }

        return container;
    }

    function updateTinyMCEVisibility(ruElements, enElements, lang) {
        if (!window.tinymce) return;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã TinyMCE –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        ruElements.forEach(elem => {
            if (!elem.id) return;
            const editor = window.tinymce.get(elem.id);
            if (editor) {
                const editorContainer = editor.getContainer();
                if (editorContainer) {
                    editorContainer.style.display = lang === 'ru' ? '' : 'none';
                }
            }
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã TinyMCE –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        enElements.forEach(elem => {
            if (!elem.id) return;
            const editor = window.tinymce.get(elem.id);
            if (editor) {
                const editorContainer = editor.getContainer();
                if (editorContainer) {
                    editorContainer.style.display = lang === 'en' ? '' : 'none';
                }
            }
        });
    }
});
# apps/news/tests/test_services.py
from django.test import TestCase
from django.core.exceptions import ValidationError
from django.contrib.auth import get_user_model
from ..models import Category, News
from ..services import (
    create_or_update_category, create_news, update_news,
    increment_view_count, toggle_favorite
)

User = get_user_model()


class CategoryServicesTest(TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""

    def test_create_category(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        category = create_or_update_category(
            name="Test Category",
            description="Test Description",
            icon="üî•"
        )

        self.assertEqual(category.name, "Test Category")
        self.assertEqual(category.description, "Test Description")
        self.assertEqual(category.icon, "üî•")

    def test_update_category(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = create_or_update_category(
            name="Initial Name",
            description="Initial Description"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        updated_category = create_or_update_category(
            name="Updated Name",
            description="Updated Description",
            icon="üîÑ",
            category_id=category.id
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.assertEqual(category.id, updated_category.id)
        self.assertEqual(updated_category.name, "Updated Name")
        self.assertEqual(updated_category.description, "Updated Description")
        self.assertEqual(updated_category.icon, "üîÑ")

    def test_update_nonexistent_category(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        with self.assertRaises(ValidationError):
            create_or_update_category(
                name="New Name",
                category_id=9999  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
            )


class NewsServicesTest(TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏."""

    def setUp(self):
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        self.category = Category.objects.create(
            name="Test Category",
            description="Test Description"
        )

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user = User.objects.create_user(
            username="testuser",
            password="password123"
        )

    def test_create_news(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
        news = create_news(
            title="Test News",
            content="Test Content",
            category=self.category,
            short_description="Test Short Description"
        )

        self.assertEqual(news.title, "Test News")
        self.assertEqual(news.content, "Test Content")
        self.assertEqual(news.short_description, "Test Short Description")
        self.assertEqual(news.category, self.category)

    def test_update_news(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news = create_news(
            title="Initial Title",
            content="Initial Content",
            category=self.category
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
        updated_news = update_news(
            news.id,
            title="Updated Title",
            content="Updated Content",
            update_slug=True
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.assertEqual(updated_news.title, "Updated Title")
        self.assertEqual(updated_news.content, "Updated Content")

    def test_increment_view_count(self):
        """–¢–µ—Å—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤."""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news = create_news(
            title="Test News",
            content="Test Content",
            category=self.category
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        self.assertEqual(news.view_count, 0)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        new_count = increment_view_count(news.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        self.assertEqual(new_count, 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –±–∞–∑–µ
        news.refresh_from_db()
        self.assertEqual(news.view_count, 1)

    def test_toggle_favorite(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ."""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
        news = create_news(
            title="Test News",
            content="Test Content",
            category=self.category
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        self.assertFalse(news in self.user.favorites.all())

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        is_favorite, message = toggle_favorite(self.user, news.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertTrue(is_favorite)
        self.assertEqual(message, "–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å —Ç–µ–ø–µ—Ä—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        self.assertTrue(news in self.user.favorites.all())

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        is_favorite, message = toggle_favorite(self.user, news.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertFalse(is_favorite)
        self.assertEqual(message, "–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –±–æ–ª—å—à–µ –Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        self.assertFalse(news in self.user.favorites.all())
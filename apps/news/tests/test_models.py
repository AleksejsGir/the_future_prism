# apps/news/tests/test_models.py
from django.test import TestCase
from django.utils import timezone
from django.utils.text import slugify
from django.contrib.auth import get_user_model
from ..models import Category, News

User = get_user_model()


class CategoryModelTest(TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ Category."""

    def setUp(self):
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        self.category = Category.objects.create(
            name="Test Category",
            description="Test Description",
            icon="üî•"
        )

    def test_category_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        self.assertEqual(self.category.name, "Test Category")
        self.assertEqual(self.category.description, "Test Description")
        self.assertEqual(self.category.icon, "üî•")

    def test_str_representation(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        self.assertEqual(str(self.category), "Test Category")


class NewsModelTest(TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ News."""

    def setUp(self):
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        self.category = Category.objects.create(
            name="Test Category",
            description="Test Description"
        )

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–æ—Å—Ç—å
        self.news = News.objects.create(
            title="Test News",
            content="Test Content",
            short_description="Test Short Description",
            category=self.category,
            published_date=timezone.now()
        )

    def test_news_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
        self.assertEqual(self.news.title, "Test News")
        self.assertEqual(self.news.content, "Test Content")
        self.assertEqual(self.news.short_description, "Test Short Description")
        self.assertEqual(self.news.category, self.category)
        self.assertEqual(self.news.view_count, 0)  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    def test_slug_generation(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–≥–∞."""
        expected_slug = slugify("Test News")
        self.assertEqual(self.news.slug, expected_slug)

    def test_str_representation(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
        self.assertEqual(str(self.news), "Test News")

    def test_favorites(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ."""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.create_user(
            username="testuser",
            password="password123"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        self.assertFalse(self.news in user.favorites.all())

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        user.favorites.add(self.news)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        self.assertTrue(self.news in user.favorites.all())

        # –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        user.favorites.remove(self.news)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        self.assertFalse(self.news in user.favorites.all())